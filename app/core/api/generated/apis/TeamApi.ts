/* tslint:disable */
/* eslint-disable */
/**
 * TodoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTeamDto,
  GetTeamDto,
  UpdateTeamDto,
} from '../models/index';
import {
    CreateTeamDtoFromJSON,
    CreateTeamDtoToJSON,
    GetTeamDtoFromJSON,
    GetTeamDtoToJSON,
    UpdateTeamDtoFromJSON,
    UpdateTeamDtoToJSON,
} from '../models/index';

export interface ApiTeamIdDeleteRequest {
    id: number;
}

export interface ApiTeamIdGetRequest {
    id: number;
}

export interface ApiTeamIdPutRequest {
    id: number;
    updateTeamDto?: UpdateTeamDto;
}

export interface ApiTeamPostRequest {
    createTeamDto?: CreateTeamDto;
}

/**
 * 
 */
export class TeamApi extends runtime.BaseAPI {

    /**
     */
    async apiTeamGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTeamDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Team`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTeamDtoFromJSON));
    }

    /**
     */
    async apiTeamGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTeamDto>> {
        const response = await this.apiTeamGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeamIdDeleteRaw(requestParameters: ApiTeamIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTeamIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Team/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeamIdDelete(requestParameters: ApiTeamIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTeamIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTeamIdGetRaw(requestParameters: ApiTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTeamIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Team/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamIdGet(requestParameters: ApiTeamIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamDto> {
        const response = await this.apiTeamIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTeamIdPutRaw(requestParameters: ApiTeamIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTeamIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Team/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTeamDtoToJSON(requestParameters['updateTeamDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeamIdPut(requestParameters: ApiTeamIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTeamIdPutRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTeamPostRaw(requestParameters: ApiTeamPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetTeamDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Team`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTeamDtoToJSON(requestParameters['createTeamDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetTeamDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTeamPost(requestParameters: ApiTeamPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetTeamDto> {
        const response = await this.apiTeamPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
