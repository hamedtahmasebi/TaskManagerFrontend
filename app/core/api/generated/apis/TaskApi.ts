/* tslint:disable */
/* eslint-disable */
/**
 * TodoApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTaskDto,
  TaskItemDto,
  UpdateTaskDto,
} from '../models/index';
import {
    CreateTaskDtoFromJSON,
    CreateTaskDtoToJSON,
    TaskItemDtoFromJSON,
    TaskItemDtoToJSON,
    UpdateTaskDtoFromJSON,
    UpdateTaskDtoToJSON,
} from '../models/index';

export interface ApiTaskIdDeleteRequest {
    id: number;
}

export interface ApiTaskIdGetRequest {
    id: number;
}

export interface ApiTaskIdPatchRequest {
    id: number;
    updateTaskDto?: UpdateTaskDto;
}

export interface ApiTaskPostRequest {
    createTaskDto?: CreateTaskDto;
}

/**
 * 
 */
export class TaskApi extends runtime.BaseAPI {

    /**
     */
    async apiTaskGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskItemDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Task`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskItemDtoFromJSON));
    }

    /**
     */
    async apiTaskGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskItemDto>> {
        const response = await this.apiTaskGetRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTaskIdDeleteRaw(requestParameters: ApiTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTaskIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Task/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTaskIdDelete(requestParameters: ApiTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTaskIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTaskIdGetRaw(requestParameters: ApiTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskItemDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTaskIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/Task/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTaskIdGet(requestParameters: ApiTaskIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskItemDto> {
        const response = await this.apiTaskIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiTaskIdPatchRaw(requestParameters: ApiTaskIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiTaskIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Task/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskDtoToJSON(requestParameters['updateTaskDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTaskIdPatch(requestParameters: ApiTaskIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.apiTaskIdPatchRaw(requestParameters, initOverrides);
    }

    /**
     */
    async apiTaskPostRaw(requestParameters: ApiTaskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskItemDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/Task`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskDtoToJSON(requestParameters['createTaskDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskItemDtoFromJSON(jsonValue));
    }

    /**
     */
    async apiTaskPost(requestParameters: ApiTaskPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskItemDto> {
        const response = await this.apiTaskPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
